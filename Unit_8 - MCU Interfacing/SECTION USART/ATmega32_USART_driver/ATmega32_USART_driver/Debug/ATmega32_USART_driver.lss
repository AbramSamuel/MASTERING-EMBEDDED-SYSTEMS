
ATmega32_USART_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000332  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010eb  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000936  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd1  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006bc  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c2b  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000412f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_CHECK_ISBUSY>:
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	88 bb       	out	0x18, r24	; 24
  be:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  c2:	8a b3       	in	r24, 0x1a	; 26
  c4:	80 6f       	ori	r24, 0xF0	; 240
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <LCD_WRITE_COMMAND>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	0e 94 56 00 	call	0xac	; 0xac <LCD_CHECK_ISBUSY>
  d8:	cb bb       	out	0x1b, r28	; 27
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	89 7f       	andi	r24, 0xF9	; 249
  de:	88 bb       	out	0x18, r24	; 24
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WRITE_COMMAND+0x14>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WRITE_COMMAND+0x1a>
  ea:	00 00       	nop
  ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_WRITE_CHAR>:
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
  f8:	0e 94 56 00 	call	0xac	; 0xac <LCD_CHECK_ISBUSY>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	88 bb       	out	0x18, r24	; 24
 102:	cb bb       	out	0x1b, r28	; 27
 104:	88 b3       	in	r24, 0x18	; 24
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	88 bb       	out	0x18, r24	; 24
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	88 bb       	out	0x18, r24	; 24
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <LCD_clear_screen>:
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 11e:	08 95       	ret

00000120 <LCD_INIT>:
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_INIT+0x4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_INIT+0xa>
 12a:	00 00       	nop
 12c:	87 b3       	in	r24, 0x17	; 23
 12e:	8e 60       	ori	r24, 0x0E	; 14
 130:	87 bb       	out	0x17, r24	; 23
 132:	88 b3       	in	r24, 0x18	; 24
 134:	81 7f       	andi	r24, 0xF1	; 241
 136:	88 bb       	out	0x18, r24	; 24
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	85 ea       	ldi	r24, 0xA5	; 165
 13e:	9e e0       	ldi	r25, 0x0E	; 14
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_INIT+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_INIT+0x26>
 146:	00 00       	nop
 148:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_clear_screen>
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 164:	08 95       	ret

00000166 <LCD_GOTO_XY>:
 166:	81 11       	cpse	r24, r1
 168:	07 c0       	rjmp	.+14     	; 0x178 <LCD_GOTO_XY+0x12>
 16a:	60 31       	cpi	r22, 0x10	; 16
 16c:	68 f4       	brcc	.+26     	; 0x188 <LCD_GOTO_XY+0x22>
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	86 0f       	add	r24, r22
 172:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 176:	08 95       	ret
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	31 f4       	brne	.+12     	; 0x188 <LCD_GOTO_XY+0x22>
 17c:	60 31       	cpi	r22, 0x10	; 16
 17e:	20 f4       	brcc	.+8      	; 0x188 <LCD_GOTO_XY+0x22>
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	86 0f       	add	r24, r22
 184:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 188:	08 95       	ret

0000018a <LCD_WRITE_STRING>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	18 c0       	rjmp	.+48     	; 0x1ca <LCD_WRITE_STRING+0x40>
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_WRITE_CHAR>
 1a4:	c0 31       	cpi	r28, 0x10	; 16
 1a6:	d1 05       	cpc	r29, r1
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <LCD_WRITE_STRING+0x2a>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_GOTO_XY>
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <LCD_WRITE_STRING+0x40>
 1b4:	c0 32       	cpi	r28, 0x20	; 32
 1b6:	d1 05       	cpc	r29, r1
 1b8:	41 f4       	brne	.+16     	; 0x1ca <LCD_WRITE_STRING+0x40>
 1ba:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_clear_screen>
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_GOTO_XY>
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	e4 cf       	rjmp	.-56     	; 0x19a <LCD_WRITE_STRING+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <main>:
#include "MCAL/USART/USART.h"
#include "MCAL/DIO/DIO.h"
#include "HAL/LCD/lcd.h"

int main(void)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	c4 56       	subi	r28, 0x64	; 100
 1e6:	d1 09       	sbc	r29, r1
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	u8 x[100];
	DIO_setPortDirection(PORTA,DIO_PIN_INPUT);
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_setPortDirection>

	LCD_INIT();
 1fa:	0e 94 90 00 	call	0x120	; 0x120 <LCD_INIT>
	USART_INIT();
 1fe:	0e 94 4c 01 	call	0x298	; 0x298 <USART_INIT>
	LCD_WRITE_STRING("USART TR");
 202:	80 e6       	ldi	r24, 0x60	; 96
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
	LCD_GOTO_XY(0,0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_GOTO_XY>
	USART_SEND_STRING("ABRAM");
 212:	89 e6       	ldi	r24, 0x69	; 105
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 60 01 	call	0x2c0	; 0x2c0 <USART_SEND_STRING>
	
    /* Replace with your application code */
    while (1) 
    {
		USART_RECEIVE_STRING(x);
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 76 01 	call	0x2ec	; 0x2ec <USART_RECEIVE_STRING>
		LCD_WRITE_STRING(x);
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WRITE_STRING>
 22a:	f7 cf       	rjmp	.-18     	; 0x21a <main+0x3e>

0000022c <DIO_setPortDirection>:
 22c:	84 30       	cpi	r24, 0x04	; 4
 22e:	98 f5       	brcc	.+102    	; 0x296 <DIO_setPortDirection+0x6a>
 230:	9f ef       	ldi	r25, 0xFF	; 255
 232:	96 0f       	add	r25, r22
 234:	9e 3f       	cpi	r25, 0xFE	; 254
 236:	78 f1       	brcs	.+94     	; 0x296 <DIO_setPortDirection+0x6a>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	81 f0       	breq	.+32     	; 0x25c <DIO_setPortDirection+0x30>
 23c:	28 f0       	brcs	.+10     	; 0x248 <DIO_setPortDirection+0x1c>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	b9 f0       	breq	.+46     	; 0x270 <DIO_setPortDirection+0x44>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	f9 f0       	breq	.+62     	; 0x284 <DIO_setPortDirection+0x58>
 246:	08 95       	ret
 248:	6f 3f       	cpi	r22, 0xFF	; 255
 24a:	29 f4       	brne	.+10     	; 0x256 <DIO_setPortDirection+0x2a>
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9b bb       	out	0x1b, r25	; 27
 252:	8a bb       	out	0x1a, r24	; 26
 254:	08 95       	ret
 256:	1b ba       	out	0x1b, r1	; 27
 258:	1a ba       	out	0x1a, r1	; 26
 25a:	08 95       	ret
 25c:	6f 3f       	cpi	r22, 0xFF	; 255
 25e:	29 f4       	brne	.+10     	; 0x26a <DIO_setPortDirection+0x3e>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	98 bb       	out	0x18, r25	; 24
 266:	87 bb       	out	0x17, r24	; 23
 268:	08 95       	ret
 26a:	18 ba       	out	0x18, r1	; 24
 26c:	17 ba       	out	0x17, r1	; 23
 26e:	08 95       	ret
 270:	6f 3f       	cpi	r22, 0xFF	; 255
 272:	29 f4       	brne	.+10     	; 0x27e <DIO_setPortDirection+0x52>
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	95 bb       	out	0x15, r25	; 21
 27a:	84 bb       	out	0x14, r24	; 20
 27c:	08 95       	ret
 27e:	15 ba       	out	0x15, r1	; 21
 280:	14 ba       	out	0x14, r1	; 20
 282:	08 95       	ret
 284:	6f 3f       	cpi	r22, 0xFF	; 255
 286:	29 f4       	brne	.+10     	; 0x292 <DIO_setPortDirection+0x66>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	92 bb       	out	0x12, r25	; 18
 28e:	81 bb       	out	0x11, r24	; 17
 290:	08 95       	ret
 292:	12 ba       	out	0x12, r1	; 18
 294:	11 ba       	out	0x11, r1	; 17
 296:	08 95       	ret

00000298 <USART_INIT>:
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	89 b9       	out	0x09, r24	; 9
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	8b b9       	out	0x0b, r24	; 11
 2a2:	8a b1       	in	r24, 0x0a	; 10
 2a4:	80 61       	ori	r24, 0x10	; 16
 2a6:	8a b9       	out	0x0a, r24	; 10
 2a8:	8a b1       	in	r24, 0x0a	; 10
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	8a b9       	out	0x0a, r24	; 10
 2ae:	08 95       	ret

000002b0 <USART_SEND>:
 2b0:	5d 9b       	sbis	0x0b, 5	; 11
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <USART_SEND>
 2b4:	8c b9       	out	0x0c, r24	; 12
 2b6:	08 95       	ret

000002b8 <USART_RECEIVE>:
 2b8:	5f 9b       	sbis	0x0b, 7	; 11
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <USART_RECEIVE>
 2bc:	8c b1       	in	r24, 0x0c	; 12
 2be:	08 95       	ret

000002c0 <USART_SEND_STRING>:
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	8c 01       	movw	r16, r24
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <USART_SEND_STRING+0x12>
 2cc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <USART_SEND>
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
 2d2:	f8 01       	movw	r30, r16
 2d4:	ec 0f       	add	r30, r28
 2d6:	f1 1d       	adc	r31, r1
 2d8:	80 81       	ld	r24, Z
 2da:	c8 17       	cp	r28, r24
 2dc:	b8 f3       	brcs	.-18     	; 0x2cc <USART_SEND_STRING+0xc>
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <USART_SEND>
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <USART_RECEIVE_STRING>:
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	8c 01       	movw	r16, r24
 2f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART_RECEIVE>
 2fc:	f8 01       	movw	r30, r16
 2fe:	80 83       	st	Z, r24
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	08 c0       	rjmp	.+16     	; 0x314 <USART_RECEIVE_STRING+0x28>
 304:	cf 5f       	subi	r28, 0xFF	; 255
 306:	78 01       	movw	r14, r16
 308:	ec 0e       	add	r14, r28
 30a:	f1 1c       	adc	r15, r1
 30c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART_RECEIVE>
 310:	f7 01       	movw	r30, r14
 312:	80 83       	st	Z, r24
 314:	f8 01       	movw	r30, r16
 316:	ec 0f       	add	r30, r28
 318:	f1 1d       	adc	r31, r1
 31a:	80 81       	ld	r24, Z
 31c:	8d 30       	cpi	r24, 0x0D	; 13
 31e:	91 f7       	brne	.-28     	; 0x304 <USART_RECEIVE_STRING+0x18>
 320:	10 82       	st	Z, r1
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
