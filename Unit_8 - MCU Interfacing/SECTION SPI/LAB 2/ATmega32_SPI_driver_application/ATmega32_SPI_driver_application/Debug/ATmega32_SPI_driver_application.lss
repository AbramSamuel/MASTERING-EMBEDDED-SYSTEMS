
ATmega32_SPI_driver_application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f6  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000089  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Master_Init>:


void SPI_Master_Init()
{
	/* Set MOSI, SCK and SS output*/
	DDRB |= (1 << MOSI) | (1 << SS) | (1 << SCK);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << MSTR) | (1 << SPE) | (1 << SPR0);
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	81 65       	ori	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <execute>:
}

void execute(unsigned char cmd , unsigned char data)
{
	PORTB &=~(1<<SS);
  7a:	98 b3       	in	r25, 0x18	; 24
  7c:	9f 7e       	andi	r25, 0xEF	; 239
  7e:	98 bb       	out	0x18, r25	; 24
	SPDR = cmd;
  80:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR &(1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <execute+0x8>
	SPDR = data;
  86:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR &(1<<SPIF)));
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <execute+0xe>
	PORTB |= (1<<SS);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <main>:
}
int main(void)
{
	unsigned int counter =0;
	unsigned index =1; 
	SPI_Master_Init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Master_Init>
    execute(0x09,0xFF);
  98:	6f ef       	ldi	r22, 0xFF	; 255
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <execute>
	execute(0x0A,0x0F);
  a0:	6f e0       	ldi	r22, 0x0F	; 15
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	0e 94 3d 00 	call	0x7a	; 0x7a <execute>
	execute(0x0B,0x07);
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	0e 94 3d 00 	call	0x7a	; 0x7a <execute>
	execute(0x0C,0x01);
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	0e 94 3d 00 	call	0x7a	; 0x7a <execute>
	
	
}
int main(void)
{
	unsigned int counter =0;
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	70 e0       	ldi	r23, 0x00	; 0
	execute(0x0A,0x0F);
	execute(0x0B,0x07);
	execute(0x0C,0x01);
    while (1) 
    {
		for (index =1 ; index<9;index++)
  bc:	c1 e0       	ldi	r28, 0x01	; 1
  be:	d0 e0       	ldi	r29, 0x00	; 0
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <main+0x3e>
		{
			execute(index,counter++);
  c2:	8b 01       	movw	r16, r22
  c4:	0f 5f       	subi	r16, 0xFF	; 255
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
  c8:	8c 2f       	mov	r24, r28
  ca:	0e 94 3d 00 	call	0x7a	; 0x7a <execute>
	execute(0x0A,0x0F);
	execute(0x0B,0x07);
	execute(0x0C,0x01);
    while (1) 
    {
		for (index =1 ; index<9;index++)
  ce:	21 96       	adiw	r28, 0x01	; 1
		{
			execute(index,counter++);
  d0:	b8 01       	movw	r22, r16
	execute(0x0A,0x0F);
	execute(0x0B,0x07);
	execute(0x0C,0x01);
    while (1) 
    {
		for (index =1 ; index<9;index++)
  d2:	c9 30       	cpi	r28, 0x09	; 9
  d4:	d1 05       	cpc	r29, r1
  d6:	a8 f3       	brcs	.-22     	; 0xc2 <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e3       	ldi	r18, 0x3F	; 63
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x4a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x54>
  e8:	00 00       	nop
  ea:	e8 cf       	rjmp	.-48     	; 0xbc <main+0x28>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
