
I2C_SLAVE_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000729  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000624  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned char ch = 0;
	I2C_SET_ADDRESS(0b11010000);	//Enable slave at address 01101000 
  6c:	80 ed       	ldi	r24, 0xD0	; 208
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 47 00 	call	0x8e	; 0x8e <I2C_SET_ADDRESS>


int main(void)
{
    /* Replace with your application code */
	unsigned char ch = 0;
  74:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_SET_ADDRESS(0b11010000);	//Enable slave at address 01101000 
    while (1) 
    {
		I2C_READ(1);		// Receive Byte and send ACK
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 49 00 	call	0x92	; 0x92 <I2C_READ>
		I2C_WRITE(ch++);		//SLA(1001100)+R(1)
  7e:	d1 e0       	ldi	r29, 0x01	; 1
  80:	dc 0f       	add	r29, r28
  82:	8c 2f       	mov	r24, r28
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_WRITE>
  8a:	cd 2f       	mov	r28, r29
  8c:	f4 cf       	rjmp	.-24     	; 0x76 <main+0xa>

0000008e <I2C_SET_ADDRESS>:
#include "I2C.h"
#define PRESCALER 1  //1 ,2,4,16,64

void I2C_SET_ADDRESS(unsigned char address)
{
	TWAR = address;
  8e:	82 b9       	out	0x02, r24	; 2
  90:	08 95       	ret

00000092 <I2C_READ>:
}
unsigned char I2C_READ(unsigned char ACK)
{
	unsigned char x=0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  92:	84 ec       	ldi	r24, 0xC4	; 196
  94:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0);               //wait to finish
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <I2C_READ+0x4>

	
}
  9c:	08 95       	ret

0000009e <I2C_WRITE>:

void I2C_WRITE(unsigned char cData)
{
	TWDR = cData;
  9e:	83 b9       	out	0x03, r24	; 3
	TWCR =(1<<TWINT)|(1<<TWEN) ;
  a0:	84 e8       	ldi	r24, 0x84	; 132
  a2:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0);               //wait to finish
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <I2C_WRITE+0x6>
}
  aa:	08 95       	ret

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
