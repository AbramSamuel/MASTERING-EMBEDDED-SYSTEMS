
I2C_MASTER_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e9  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000663  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned char ch;
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	I2C_INIT(0x48);
  70:	68 e4       	ldi	r22, 0x48	; 72
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	89 e6       	ldi	r24, 0x69	; 105
  80:	98 e1       	ldi	r25, 0x18	; 24
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
    while (1) 
    {
		_delay_ms(1000);
		I2C_STATR();					//Transmit Start Condition
  8e:	0e 94 67 00 	call	0xce	; 0xce <I2C_STATR>
		I2C_WRITE(0b11010000+1);		//Transmit  SLA + R(1)
  92:	81 ed       	ldi	r24, 0xD1	; 209
  94:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_WRITE>
		ch =I2C_READ(0);				//read the last byte and send NACK		
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 77 00 	call	0xee	; 0xee <I2C_READ>
  9e:	c8 2f       	mov	r28, r24
		I2C_STOP();						//Transmit Stop condition
  a0:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_STOP>
		PORTA = ch;
  a4:	cb bb       	out	0x1b, r28	; 27
  a6:	ea cf       	rjmp	.-44     	; 0x7c <main+0x10>

000000a8 <I2C_INIT>:

#include "I2C.h"
#define PRESCALER 1  //1 ,2,4,16,64

void I2C_INIT(unsigned long SCL_Clock)
{
  a8:	9b 01       	movw	r18, r22
  aa:	ac 01       	movw	r20, r24
	TWBR = (unsigned char) (((F_CPU/SCL_Clock)-16)/(2*PRESCALER));
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	72 e1       	ldi	r23, 0x12	; 18
  b0:	8a e7       	ldi	r24, 0x7A	; 122
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 81 00 	call	0x102	; 0x102 <__udivmodsi4>
  b8:	da 01       	movw	r26, r20
  ba:	c9 01       	movw	r24, r18
  bc:	40 97       	sbiw	r24, 0x10	; 16
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
  c2:	b6 95       	lsr	r27
  c4:	a7 95       	ror	r26
  c6:	97 95       	ror	r25
  c8:	87 95       	ror	r24
  ca:	80 b9       	out	0x00, r24	; 0
  cc:	08 95       	ret

000000ce <I2C_STATR>:
	
}
void I2C_STATR(void)
{

	TWCR =(1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ;
  ce:	84 ea       	ldi	r24, 0xA4	; 164
  d0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR &(1<<7))==0));                 // wait to finish
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <I2C_STATR+0x4>
	while ((TWSR)!=0x08);                   //Start Condition has Been Transmitted
  d8:	81 b1       	in	r24, 0x01	; 1
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	e9 f7       	brne	.-6      	; 0xd8 <I2C_STATR+0xa>
	
}
  de:	08 95       	ret

000000e0 <I2C_WRITE>:
void I2C_WRITE(unsigned char cData)
{
	TWDR = cData;
  e0:	83 b9       	out	0x03, r24	; 3
	TWCR =(1<<TWINT) | (1<<TWEN) ;
  e2:	84 e8       	ldi	r24, 0x84	; 132
  e4:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0);               //wait to finish
  e6:	06 b6       	in	r0, 0x36	; 54
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <I2C_WRITE+0x6>
}
  ec:	08 95       	ret

000000ee <I2C_READ>:

unsigned char I2C_READ(unsigned char ACK)
{
	TWCR =(1<<TWINT) | (1<<TWEA) | (1<<TWEN) ;
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 0x80)==0);               //wait to finish
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <I2C_READ+0x4>
	return TWDR;
  f8:	83 b1       	in	r24, 0x03	; 3
}
  fa:	08 95       	ret

000000fc <I2C_STOP>:

void I2C_STOP()
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  fc:	84 e9       	ldi	r24, 0x94	; 148
  fe:	86 bf       	out	0x36, r24	; 54
 100:	08 95       	ret

00000102 <__udivmodsi4>:
 102:	a1 e2       	ldi	r26, 0x21	; 33
 104:	1a 2e       	mov	r1, r26
 106:	aa 1b       	sub	r26, r26
 108:	bb 1b       	sub	r27, r27
 10a:	fd 01       	movw	r30, r26
 10c:	0d c0       	rjmp	.+26     	; 0x128 <__udivmodsi4_ep>

0000010e <__udivmodsi4_loop>:
 10e:	aa 1f       	adc	r26, r26
 110:	bb 1f       	adc	r27, r27
 112:	ee 1f       	adc	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	a2 17       	cp	r26, r18
 118:	b3 07       	cpc	r27, r19
 11a:	e4 07       	cpc	r30, r20
 11c:	f5 07       	cpc	r31, r21
 11e:	20 f0       	brcs	.+8      	; 0x128 <__udivmodsi4_ep>
 120:	a2 1b       	sub	r26, r18
 122:	b3 0b       	sbc	r27, r19
 124:	e4 0b       	sbc	r30, r20
 126:	f5 0b       	sbc	r31, r21

00000128 <__udivmodsi4_ep>:
 128:	66 1f       	adc	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	88 1f       	adc	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	1a 94       	dec	r1
 132:	69 f7       	brne	.-38     	; 0x10e <__udivmodsi4_loop>
 134:	60 95       	com	r22
 136:	70 95       	com	r23
 138:	80 95       	com	r24
 13a:	90 95       	com	r25
 13c:	9b 01       	movw	r18, r22
 13e:	ac 01       	movw	r20, r24
 140:	bd 01       	movw	r22, r26
 142:	cf 01       	movw	r24, r30
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
