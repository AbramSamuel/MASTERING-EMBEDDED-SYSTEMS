
I2C_SLAVE_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d2  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e1  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA= 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	I2C_SET_ADDRESS(0b11010000);	//Enable slave at address 01101000 and Don't accept general call
  70:	80 ed       	ldi	r24, 0xD0	; 208
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 42 00 	call	0x84	; 0x84 <I2C_SET_ADDRESS>
    while (1) 
    {
		PORTA = I2C_READ(1);		// Receive Byte and send ACK
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 44 00 	call	0x88	; 0x88 <I2C_READ>
  80:	8b bb       	out	0x1b, r24	; 27
  82:	fa cf       	rjmp	.-12     	; 0x78 <main+0xc>

00000084 <I2C_SET_ADDRESS>:
#include "I2C.h"
#define PRESCALER 1  //1 ,2,4,16,64

void I2C_SET_ADDRESS(unsigned char address)
{
	TWAR = address;
  84:	82 b9       	out	0x02, r24	; 2
  86:	08 95       	ret

00000088 <I2C_READ>:
}
unsigned char I2C_READ(unsigned char ACK)
{
	unsigned char x=0;
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  88:	84 ec       	ldi	r24, 0xC4	; 196
  8a:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <I2C_READ+0x4>
  92:	01 c0       	rjmp	.+2      	; 0x96 <I2C_READ+0xe>
	while ((TWSR) != 0x60) x = TWSR;             // own SLA+W(0) has been transmitted and ACK has been returned
  94:	81 b1       	in	r24, 0x01	; 1
  96:	81 b1       	in	r24, 0x01	; 1
  98:	80 36       	cpi	r24, 0x60	; 96
  9a:	e1 f7       	brne	.-8      	; 0x94 <I2C_READ+0xc>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  9c:	84 ec       	ldi	r24, 0xC4	; 196
  9e:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & 1<<7) == 0);
  a0:	06 b6       	in	r0, 0x36	; 54
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <I2C_READ+0x18>
  a6:	01 c0       	rjmp	.+2      	; 0xaa <I2C_READ+0x22>
	while ((TWSR) != 0x80) x = TWSR;          // Data has been transmitted and ACK has been returned
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	81 b1       	in	r24, 0x01	; 1
  ac:	80 38       	cpi	r24, 0x80	; 128
  ae:	e1 f7       	brne	.-8      	; 0xa8 <I2C_READ+0x20>
	return TWDR;
  b0:	83 b1       	in	r24, 0x03	; 3

	
  b2:	08 95       	ret

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
